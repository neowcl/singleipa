<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\Objects\CBMX56X_fw.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\Objects\CBMX56X_fw.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Sat Oct 11 11:14:58 2025
<BR><P>
<H3>Maximum Stack Usage =        680 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; app_handle_task &rArr; timer_reg_command &rArr; handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[49]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">FAULT_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FAULT_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">CC_IRQHandler</a> from isr.o(.text.CC_IRQHandler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[e]">FAULT_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from isr.o(.text.HardFault_Handler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[a]">I2C_IRQHandler</a> from isr.o(.text.I2C_IRQHandler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[10]">LN_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from isr.o(.text.NMI_Handler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[b]">PA_IRQHandler</a> from isr.o(.text.PA_IRQHandler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[6]">PVD_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from isr.o(.text.PendSV_Handler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[11]">SHA256_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from isr.o(.text.SVC_Handler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from isr.o(.text.SysTick_Handler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[12]">SystemInit</a> from system_cbmx56x.o(.text.SystemInit) referenced from startup_cbmx56x.o(.text)
 <LI><a href="#[8]">TMR0_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[9]">TMR1_IRQHandler</a> from isr.o(.text.TMR1_IRQHandler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[f]">VADC_IRQHandler</a> from isr.o(.text.VADC_IRQHandler) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[c]">WK_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[7]">WWDG_IRQHandler</a> from startup_cbmx56x.o(.text) referenced from startup_cbmx56x.o(RESET)
 <LI><a href="#[13]">__main</a> from __main.o(!!!main) referenced from startup_cbmx56x.o(.text)
 <LI><a href="#[16]">read_ChemID_fun</a> from block_command.o(.text.read_ChemID_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[14]">read_DeviceType_fun</a> from block_command.o(.text.read_DeviceType_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[15]">read_FirmwareVersion_fun</a> from block_command.o(.text.read_FirmwareVersion_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[1d]">read_serial_number</a> from block_command.o(.text.read_serial_number) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[19]">write_Reset_sys_fun</a> from block_command.o(.text.write_Reset_sys_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[1e]">write_SealDevice_fun</a> from block_command.o(.text.write_SealDevice_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[1c]">write_calibration_enable_fun</a> from block_command.o(.text.write_calibration_enable_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[18]">write_full_unseal_fun</a> from block_command.o(.text.write_full_unseal_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[1a]">write_life_time_enable_fun</a> from block_command.o(.text.write_life_time_enable_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[1b]">write_life_time_flush_fun</a> from block_command.o(.text.write_life_time_flush_fun) referenced from block_command.o(.rodata.command_id_fun)
 <LI><a href="#[17]">write_unseal_fun</a> from block_command.o(.text.write_unseal_fun) referenced from block_command.o(.rodata.command_id_fun)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[136]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[137]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[138]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[139]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[144]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[145]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[146]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[147]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[148]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[149]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[20]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[26]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; app_handle_task &rArr; timer_reg_command &rArr; handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[153]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[154]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAULT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAULT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SHA256_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cbmx56x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_cbmx56x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[156]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_voltage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
</UL>

<P><STRONG><a name="[15c]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_ldivmod</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
</UL>

<P><STRONG><a name="[15d]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_authen_cmd
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_calc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_read_fun
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_authen_cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_flash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCmdProcess
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_calc
</UL>

<P><STRONG><a name="[15e]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[31]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCmdProcess
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLifeTimeData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_init
</UL>

<P><STRONG><a name="[15f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_calc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_calc
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_FCC
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[35]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[3b]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[3a]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
</UL>

<P><STRONG><a name="[164]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[165]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[166]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
</UL>

<P><STRONG><a name="[167]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
</UL>

<P><STRONG><a name="[168]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[169]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
</UL>

<P><STRONG><a name="[16a]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
</UL>

<P><STRONG><a name="[16b]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
</UL>

<P><STRONG><a name="[16c]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[16d]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[16e]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[23]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[46]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[47]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[16f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[170]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[2c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[171]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>A_Div_B</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utility.o(.text.A_Div_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A_Div_B
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdiv_quotient_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[d]"></a>CC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(.text.CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_intetrrupt_status_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_intetrrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Calc_ATTE</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, calc_cvt.o(.text.Calc_ATTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calc_ATTE &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[55]"></a>Calc_ATTF</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, calc_cvt.o(.text.Calc_ATTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Calc_ATTF &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[56]"></a>Calc_AvgCur</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, calc_cvt.o(.text.Calc_AvgCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Calc_AvgCur &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[bc]"></a>Calc_CC</STRONG> (Thumb, 388 bytes, Stack size 20 bytes, datcalc_spl.o(.text.Calc_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Calc_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[57]"></a>Calc_CPVolt</STRONG> (Thumb, 1688 bytes, Stack size 88 bytes, datcalc_spl.o(.text.Calc_CPVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Calc_CPVolt &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
</UL>

<P><STRONG><a name="[58]"></a>Calc_FullCharge</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, calc_cvt.o(.text.Calc_FullCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Calc_FullCharge &rArr; FullCharge &rArr; FCC_Limit_Chk &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCharge
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[5a]"></a>Calc_HoseiRC</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, datcalc_spl.o(.text.Calc_HoseiRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Calc_HoseiRC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
</UL>

<P><STRONG><a name="[5b]"></a>Calc_QMax</STRONG> (Thumb, 1704 bytes, Stack size 32 bytes, calc_cvt.o(.text.Calc_QMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Calc_QMax &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[5c]"></a>Calc_RC</STRONG> (Thumb, 1712 bytes, Stack size 24 bytes, datcalc_spl.o(.text.Calc_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Calc_RC &rArr; Make_Relearning_cpl &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_pinghua
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning_cpl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_HoseiRC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CPVolt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[60]"></a>Calc_RSOC</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, datcalc_spl.o(.text.Calc_RSOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Calc_RSOC &rArr; Dsg_Update_work &rArr; Dsg_Update_FCC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_work
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_inner_3res
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cap
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[63]"></a>Calc_factor_of_fcc</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, datcalc_spl.o(.text.Calc_factor_of_fcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning_cpl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCC_Limit_Chk
</UL>

<P><STRONG><a name="[64]"></a>Calc_iRSOC</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, datcalc_spl.o(.text.Calc_iRSOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calc_iRSOC
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[61]"></a>Calc_inner_3res</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, datcalc_spl.o(.text.Calc_inner_3res))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Calc_inner_3res &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RSOC
</UL>

<P><STRONG><a name="[126]"></a>DCR_Mode</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, calc_cvt.o(.text.DCR_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCR_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[65]"></a>DFUdata_Chk</STRONG> (Thumb, 1368 bytes, Stack size 16 bytes, data_flash.o(.text.DFUdata_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = DFUdata_Chk &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[67]"></a>DF_Erase_A</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ram.o(.text.DF_Erase_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DF_Erase_A &rArr; fmc_page_erase &rArr; flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[69]"></a>DF_Erase_B</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ram.o(.text.DF_Erase_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DF_Erase_B &rArr; fmc_page_erase &rArr; flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[6a]"></a>DF_Read</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, ram.o(.text.DF_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DF_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[6c]"></a>DF_Write</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, ram.o(.text.DF_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DF_Write &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[6d]"></a>Dsg_Update_FCC</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, datcalc_spl.o(.text.Dsg_Update_FCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dsg_Update_FCC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_work
</UL>

<P><STRONG><a name="[62]"></a>Dsg_Update_work</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, datcalc_spl.o(.text.Dsg_Update_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dsg_Update_work &rArr; Dsg_Update_FCC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_FCC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RSOC
</UL>

<P><STRONG><a name="[6f]"></a>ECCComm</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, myi2c.o(.text.ECCComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ECCComm &rArr; IIC_ReadIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
</UL>

<P><STRONG><a name="[72]"></a>FCC_Limit_Chk</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, datcalc_spl.o(.text.FCC_Limit_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FCC_Limit_Chk &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_factor_of_fcc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCharge
</UL>

<P><STRONG><a name="[124]"></a>Fabs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utility.o(.text.Fabs))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[c1]"></a>FlagStatus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mode.o(.text.FlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[59]"></a>FullCharge</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, calc_cvt.o(.text.FullCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FullCharge &rArr; FCC_Limit_Chk &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCC_Limit_Chk
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FullCharge
</UL>

<P><STRONG><a name="[a]"></a>I2C_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(.text.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_IRQHandler &rArr; iic_isr_process &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_pmu_set_run_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IIC_ReadIpa</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, myi2c.o(.text.IIC_ReadIpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_ReadIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPhVerify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPHSeril
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCComm
</UL>

<P><STRONG><a name="[70]"></a>IIC_ReadReg</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, myi2c.o(.text.IIC_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_ReadReg &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCComm
</UL>

<P><STRONG><a name="[7c]"></a>IIC_WriteIpa</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, myi2c.o(.text.IIC_WriteIpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_WriteIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[7d]"></a>IIC_timeout_process</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, modules_init.o(.text.IIC_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_timeout_process &rArr; i2c_init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_apb_periph_clock_enable_ctrl
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wakeup_enable_ctrl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stretch_clock_enable_ctrl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_status_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable_ctrl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_def_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_busy_timeout_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_busy_timeout_enable_ctrl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_addr_timeout_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_addr_timeout_enable_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>IPHSeril</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myi2c.o(.text.IPHSeril))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IPHSeril &rArr; IIC_ReadIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
</UL>

<P><STRONG><a name="[8b]"></a>IPhVerify</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, myi2c.o(.text.IPhVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IPhVerify &rArr; IIC_ReadIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
</UL>

<P><STRONG><a name="[8c]"></a>Init_Cap</STRONG> (Thumb, 652 bytes, Stack size 32 bytes, datcalc_spl.o(.text.Init_Cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Init_Cap &rArr; Calc_RSOC &rArr; Dsg_Update_work &rArr; Dsg_Update_FCC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RSOC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_soc_input_state
</UL>

<P><STRONG><a name="[8d]"></a>LT_Erase_A</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lifetime.o(.text.LT_Erase_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LT_Erase_A &rArr; fmc_page_erase &rArr; flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[8e]"></a>LT_Erase_B</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lifetime.o(.text.LT_Erase_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LT_Erase_B &rArr; fmc_page_erase &rArr; flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[8f]"></a>LifeTime_Calc</STRONG> (Thumb, 1040 bytes, Stack size 32 bytes, lifetime.o(.text.LifeTime_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LifeTime_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[90]"></a>LifeTime_Read</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, lifetime.o(.text.LifeTime_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LifeTime_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[91]"></a>LifeTime_Write</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, lifetime.o(.text.LifeTime_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = LifeTime_Write &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[92]"></a>Make_RC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, datcalc_spl.o(.text.Make_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Make_RC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[5f]"></a>Make_Relearning</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, datcalc_spl.o(.text.Make_Relearning))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Make_Relearning &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_factor_of_fcc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
</UL>

<P><STRONG><a name="[5e]"></a>Make_Relearning_cpl</STRONG> (Thumb, 636 bytes, Stack size 56 bytes, datcalc_spl.o(.text.Make_Relearning_cpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Make_Relearning_cpl &rArr; Calc_factor_of_fcc &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_factor_of_fcc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
</UL>

<P><STRONG><a name="[93]"></a>Make_iRC</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, datcalc_spl.o(.text.Make_iRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Make_iRC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[94]"></a>MyI2C_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, myi2c.o(.text.MyI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MyI2C_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mf_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[77]"></a>MyI2C_ReceiveAck</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, myi2c.o(.text.MyI2C_ReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_ReceiveAck
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_value_read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[79]"></a>MyI2C_ReceiveByte</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, myi2c.o(.text.MyI2C_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MyI2C_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_value_read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[7a]"></a>MyI2C_SendAck</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, myi2c.o(.text.MyI2C_SendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_SendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[76]"></a>MyI2C_SendByte</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, myi2c.o(.text.MyI2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[75]"></a>MyI2C_Start</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, myi2c.o(.text.MyI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[7b]"></a>MyI2C_Stop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, myi2c.o(.text.MyI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[b]"></a>PA_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, isr.o(.text.PA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PA_IRQHandler &rArr; address_gpio_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_gpio_disable_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>ReadFlashData</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, standard_data_cmd.o(.text.ReadFlashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFlashData
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_block_read
</UL>

<P><STRONG><a name="[9a]"></a>ReadLifeTimeData</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, standard_data_cmd.o(.text.ReadLifeTimeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadLifeTimeData
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_block_read
</UL>

<P><STRONG><a name="[9b]"></a>ReadRecordData</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, standard_data_cmd.o(.text.ReadRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadRecordData
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_block_read
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Set_CCCV</STRONG> (Thumb, 1292 bytes, Stack size 40 bytes, mode.o(.text.Set_CCCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_CCCV
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[9d]"></a>SubCmdProcess</STRONG> (Thumb, 1920 bytes, Stack size 24 bytes, standard_data_cmd.o(.text.SubCmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SubCmdProcess &rArr; cc_start_connection &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_start_connection
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_event
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_block_read
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_cbmx56x.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>TFStatus</STRONG> (Thumb, 792 bytes, Stack size 20 bytes, mode.o(.text.TFStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TFStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[9]"></a>TMR1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR1_IRQHandler &rArr; app_task_isr_process &rArr; ts_W_L
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_isr_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>TemperatureRangeJudge</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mode.o(.text.TemperatureRangeJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TemperatureRangeJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[c0]"></a>Timestamp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lifetime.o(.text.Timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[f]"></a>VADC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(.text.VADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_intetrrupt_status_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_intetrrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cbmx56x.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>VADC_init</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, modules_init.o(.text.VADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VADC_init &rArr; vadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_enable_ctrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_vcm_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_stop_mode_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_interrupt_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_down_sampling_rate_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_chop_enable_ctrl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_channel_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_channel_enable_ctrl
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_apb_periph_clock_enable_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[be]"></a>VoltageRangeJudge</STRONG> (Thumb, 376 bytes, Stack size 20 bytes, mode.o(.text.VoltageRangeJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VoltageRangeJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[98]"></a>address_gpio_disable_irq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modules_init.o(.text.address_gpio_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_gpio_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>app_handle_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_task.o(.text.app_handle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = app_handle_task &rArr; timer_reg_command &rArr; handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>app_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, app_task.o(.text.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_init &rArr; fristsample &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_soc_input_state
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_uid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fristsample
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_iRC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_RC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>app_task_isr_process</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, task.o(.text.app_task_isr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_task_isr_process &rArr; ts_W_L
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_L
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_interrupt_status_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_interrupt_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>app_task_loop</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, task.o(.text.app_task_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = app_task_loop &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_H
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_decrease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pmu_period_time
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_pmu_proc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageRangeJudge
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timestamp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureRangeJudge
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CCCV
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Calc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_iRSOC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RSOC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_QMax
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FullCharge
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_AvgCur
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_ATTF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_ATTE
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>bi2cs_dataCmd_Save</STRONG> (Thumb, 712 bytes, Stack size 56 bytes, bi2cs_interface.o(.text.bi2cs_dataCmd_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bi2cs_dataCmd_Save &rArr; t_comA0Change &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCComm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[b4]"></a>bi2cs_dataCmd_init</STRONG> (Thumb, 1228 bytes, Stack size 40 bytes, bi2cs_interface.o(.text.bi2cs_dataCmd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bi2cs_dataCmd_init &rArr; more_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[11a]"></a>block_delay_ms</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, modules_init.o(.text.block_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = block_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_event
</UL>

<P><STRONG><a name="[d5]"></a>cal_crc8_check</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, comm_protocol.o(.text.cal_crc8_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cal_crc8_check
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_id_handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_write_fun
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_read_fun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_command_id_handle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_write_fun
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_read_fun
</UL>

<P><STRONG><a name="[cb]"></a>cc_ccidr_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_ccidr_get))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
</UL>

<P><STRONG><a name="[10e]"></a>cc_chop_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_chop_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[111]"></a>cc_down_sampling_rate_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_down_sampling_rate_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[10c]"></a>cc_enable_ctrl</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[ca]"></a>cc_get_current</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, cbmx56x_cc.o(.text.cc_get_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdiv_quotient_read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_ccidr_get
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
</UL>

<P><STRONG><a name="[112]"></a>cc_gtc_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_gtc_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[10d]"></a>cc_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cbmx56x_cc.o(.text.cc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[114]"></a>cc_interrupt_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_interrupt_config))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[51]"></a>cc_intetrrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_intetrrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>cc_intetrrupt_status_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_intetrrupt_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>cc_opchop_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_opchop_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[9f]"></a>cc_start_connection</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task.o(.text.cc_start_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cc_start_connection &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCmdProcess
</UL>

<P><STRONG><a name="[113]"></a>cc_stop_mode_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_stop_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[110]"></a>cc_vcm_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_cc.o(.text.cc_vcm_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[f0]"></a>check_rx_data_packet</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, comm_protocol.o(.text.check_rx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_rx_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_debug_mode
</UL>

<P><STRONG><a name="[5d]"></a>chg_pinghua</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, datcalc_spl.o(.text.chg_pinghua))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chg_pinghua
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
</UL>

<P><STRONG><a name="[ce]"></a>clear_dog</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modules_init.o(.text.clear_dog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_dog
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_write_access_enable_ctrl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_reload_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_event
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>crc_def_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_crc.o(.text.crc_def_init))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[d1]"></a>data_memory_read_fun</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, data_flash.o(.text.data_memory_read_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = data_memory_read_fun &rArr; os_read_flash &rArr; fmc_read_flash &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_seal_type
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[d6]"></a>data_memory_write_fun</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, data_flash.o(.text.data_memory_write_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_seal_type
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[d8]"></a>filled_authen_cmd</STRONG> (Thumb, 300 bytes, Stack size 128 bytes, comm_protocol.o(.text.filled_authen_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = filled_authen_cmd &rArr; sha256_hmac_calc &rArr; sha256_calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_calc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[dc]"></a>filled_calibration_enable_cmd</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_calibration_enable_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_calibration_enable_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[dd]"></a>filled_connected_cmd</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_connected_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_connected_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[de]"></a>filled_disconnected_cmd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_disconnected_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_disconnected_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[df]"></a>filled_info_cmd</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, comm_protocol.o(.text.filled_info_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = filled_info_cmd &rArr; flash_get_ChipUID_value &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[e3]"></a>filled_jump_cmd</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_jump_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_jump_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[e4]"></a>filled_unlock_memory_cmd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_unlock_memory_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_unlock_memory_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[e5]"></a>filled_write_calibration_value_cmd</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, comm_protocol.o(.text.filled_write_calibration_value_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filled_write_calibration_value_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[e1]"></a>flash_get_ChipUID_value</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, cbmx56x_flash.o(.text.flash_get_ChipUID_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_get_ChipUID_value &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_uid
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
</UL>

<P><STRONG><a name="[103]"></a>flash_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cbmx56x_flash.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[e8]"></a>flash_last_operation_wait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cbmx56x_flash.o(.text.flash_last_operation_wait))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[e7]"></a>flash_page_erase</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cbmx56x_flash.o(.text.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_last_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[e6]"></a>flash_page_read</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, cbmx56x_flash.o(.text.flash_page_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_last_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_flash
</UL>

<P><STRONG><a name="[e9]"></a>flash_page_write</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cbmx56x_flash.o(.text.flash_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_last_operation_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
</UL>

<P><STRONG><a name="[104]"></a>flash_wait_counter_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_flash.o(.text.flash_wait_counter_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[68]"></a>fmc_page_erase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, modules_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_page_erase &rArr; flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_interrupt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_Erase_B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_Erase_A
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase_B
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase_A
</UL>

<P><STRONG><a name="[eb]"></a>fmc_read_flash</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, modules_fmc.o(.text.fmc_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fmc_read_flash &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_read_flash
</UL>

<P><STRONG><a name="[66]"></a>fmc_write_flash</STRONG> (Thumb, 184 bytes, Stack size 552 bytes, modules_fmc.o(.text.fmc_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_interrupt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFUdata_Chk
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_write_flash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
</UL>

<P><STRONG><a name="[b1]"></a>fristsample</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task.o(.text.fristsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fristsample &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[c3]"></a>fw_pmu_proc</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, modules_pmu.o(.text.fw_pmu_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fw_pmu_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_speed_current
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[73]"></a>fw_pmu_set_run_mode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, modules_pmu.o(.text.fw_pmu_set_run_mode))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>gcr_reg_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cbmx56x_gcr.o(.text.gcr_reg_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_uid
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[e0]"></a>gcr_reg_unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_gcr.o(.text.gcr_reg_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_uid
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[b3]"></a>get_chip_uid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, task.o(.text.get_chip_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_chip_uid &rArr; flash_get_ChipUID_value &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_ChipUID_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[ed]"></a>get_high_speed_current</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(.text.get_high_speed_current))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_pmu_proc
</UL>

<P><STRONG><a name="[121]"></a>get_iic_rx_handle_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, standard_data_cmd.o(.text.get_iic_rx_handle_type))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[d4]"></a>get_new_random</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, comm_protocol.o(.text.get_new_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_new_random
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_id_handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_write_fun
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_read_fun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_command_id_handle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_write_fun
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_read_fun
</UL>

<P><STRONG><a name="[b9]"></a>get_pmu_period_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modules_pmu.o(.text.get_pmu_period_time))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[db]"></a>get_sys_run_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(.text.get_sys_run_time))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_err_code_packet
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_write_calibration_value_cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_unlock_memory_cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_jump_cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_disconnected_cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_connected_cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_calibration_enable_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_authen_cmd
</UL>

<P><STRONG><a name="[d2]"></a>get_sys_seal_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.get_sys_seal_type))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_write_fun
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_write_fun
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_read_fun
</UL>

<P><STRONG><a name="[97]"></a>gpio_bit_value_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cbmx56x_gpio.o(.text.gpio_bit_value_read))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>

<P><STRONG><a name="[78]"></a>gpio_bit_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_L
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_H
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadIpa
</UL>

<P><STRONG><a name="[95]"></a>gpio_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cbmx56x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[ad]"></a>gpio_interrupt_status_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cbmx56x_gpio.o(.text.gpio_interrupt_status_clear))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_gpio_disable_irq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[96]"></a>gpio_mf_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cbmx56x_gpio.o(.text.gpio_mf_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_mf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[ee]"></a>handle_block_read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, standard_data_cmd.o(.text.handle_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = handle_block_read &rArr; SubCmdProcess &rArr; cc_start_connection &rArr; update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCmdProcess
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLifeTimeData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[ef]"></a>handle_debug_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_debug_mode_handle.o(.text.handle_debug_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_err_code_packet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rx_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[4f]"></a>hdiv_quotient_int</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cbmx56x_hdiv.o(.text.hdiv_quotient_int))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Div_B
</UL>

<P><STRONG><a name="[cc]"></a>hdiv_quotient_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cbmx56x_hdiv.o(.text.hdiv_quotient_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hdiv_quotient_read
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_voltage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
</UL>

<P><STRONG><a name="[85]"></a>i2c_addr_timeout_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_addr_timeout_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[84]"></a>i2c_addr_timeout_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_addr_timeout_set))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[11e]"></a>i2c_busy_judge</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cbmx56x_i2c.o(.text.i2c_busy_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_busy_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[89]"></a>i2c_busy_timeout_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_busy_timeout_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[88]"></a>i2c_busy_timeout_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_busy_timeout_set))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[f8]"></a>i2c_data_receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[f9]"></a>i2c_data_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_data_send))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[7f]"></a>i2c_def_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cbmx56x_i2c.o(.text.i2c_def_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_def_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_periph_reset_enable_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
</UL>

<P><STRONG><a name="[87]"></a>i2c_enable_ctrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[f7]"></a>i2c_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[7e]"></a>i2c_flag_status_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_flag_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
</UL>

<P><STRONG><a name="[83]"></a>i2c_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cbmx56x_i2c.o(.text.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[f5]"></a>i2c_interrupt_bit_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_interrupt_bit_clear))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[82]"></a>i2c_interrupt_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_interrupt_config))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[f6]"></a>i2c_software_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_software_reset))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[81]"></a>i2c_stretch_clock_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_stretch_clock_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[86]"></a>i2c_wakeup_enable_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_i2c.o(.text.i2c_wakeup_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[74]"></a>iic_isr_process</STRONG> (Thumb, 3412 bytes, Stack size 88 bytes, standard_data_cmd.o(.text.iic_isr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iic_isr_process &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_L
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_H
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_pmu_set_run_mode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_software_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_bit_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDFbySubcmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_I2C_TimeOut_Count
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteIpa
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>init_soc_input_state</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, task.o(.text.init_soc_input_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = init_soc_input_state &rArr; Init_Cap &rArr; Calc_RSOC &rArr; Dsg_Update_work &rArr; Dsg_Update_FCC &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cap
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[102]"></a>iwdg_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_iwdg.o(.text.iwdg_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[100]"></a>iwdg_prescaler_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_iwdg.o(.text.iwdg_prescaler_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[d0]"></a>iwdg_reload_counter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_iwdg.o(.text.iwdg_reload_counter))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dog
</UL>

<P><STRONG><a name="[101]"></a>iwdg_reload_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_iwdg.o(.text.iwdg_reload_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[cf]"></a>iwdg_write_access_enable_ctrl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_iwdg.o(.text.iwdg_write_access_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dog
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = main &rArr; app_handle_task &rArr; timer_reg_command &rArr; handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dog
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_task
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ec]"></a>modules_cc_hp_updata_value</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, modules_current.o(.text.modules_cc_hp_updata_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_intetrrupt_status_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_intetrrupt_flag_clear
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fristsample
</UL>

<P><STRONG><a name="[123]"></a>modules_cc_hs_get_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modules_current.o(.text.modules_cc_hs_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[ff]"></a>modules_init</STRONG> (Thumb, 552 bytes, Stack size 72 bytes, modules_init.o(.text.modules_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = modules_init &rArr; VADC_init &rArr; vadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_enable_ctrl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_unlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcr_reg_lock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_timer_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_enable_ctrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1_cnt_update_enable_ctrl
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_tim1_clk_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_apb_periph_clock_enable_ctrl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deepsleep2_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_write_access_enable_ctrl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_reload_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_prescaler_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wakeup_enable_ctrl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stretch_clock_enable_ctrl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable_ctrl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_busy_timeout_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_busy_timeout_enable_ctrl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_addr_timeout_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_addr_timeout_enable_ctrl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mf_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_counter_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_def_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_vcm_set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_stop_mode_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_opchop_enable_ctrl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_interrupt_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_gtc_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_down_sampling_rate_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_chop_enable_ctrl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_init
</UL>

<P><STRONG><a name="[c9]"></a>more_init</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, bi2cs_interface.o(.text.more_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = more_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_init
</UL>

<P><STRONG><a name="[105]"></a>nvic_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cbmx56x_nvic.o(.text.nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[ea]"></a>os_enable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api_implement.o(.text.os_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[d3]"></a>os_read_flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api_implement.o(.text.os_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_read_flash &rArr; fmc_read_flash &rArr; flash_page_read
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_read_fun
</UL>

<P><STRONG><a name="[11b]"></a>os_reset_system</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, api_implement.o(.text.os_reset_system))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_event
</UL>

<P><STRONG><a name="[d7]"></a>os_write_flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api_implement.o(.text.os_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_write_fun
</UL>

<P><STRONG><a name="[f2]"></a>parse_rx_data_packet</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, comm_protocol.o(.text.parse_rx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_id_handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_write_fun
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_read_fun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_command_id_handle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_write_calibration_value_cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_unlock_memory_cmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_jump_cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_info_cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_disconnected_cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_connected_cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_calibration_enable_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_authen_cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_write_fun
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_memory_read_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_debug_mode
</UL>

<P><STRONG><a name="[10b]"></a>pmu_deepsleep2_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cbmx56x_pmu.o(.text.pmu_deepsleep2_init))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[4e]"></a>rcc_ahb_periph_clock_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_rcc.o(.text.rcc_ahb_periph_clock_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_voltage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Div_B
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_get_current
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[80]"></a>rcc_apb_periph_clock_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_rcc.o(.text.rcc_apb_periph_clock_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_timeout_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[f3]"></a>rcc_periph_reset_enable_ctrl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cbmx56x_rcc.o(.text.rcc_periph_reset_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_def_init
</UL>

<P><STRONG><a name="[106]"></a>rcc_tim1_clk_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_rcc.o(.text.rcc_tim1_clk_config))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[c2]"></a>readIPAmessage</STRONG> (Thumb, 1524 bytes, Stack size 40 bytes, bi2cs_interface.o(.text.readIPAmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = readIPAmessage &rArr; IPhVerify &rArr; IIC_ReadIpa &rArr; MyI2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_L
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPhVerify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPHSeril
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[16]"></a>read_ChemID_fun</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, block_command.o(.text.read_ChemID_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[14]"></a>read_DeviceType_fun</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, block_command.o(.text.read_DeviceType_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[15]"></a>read_FirmwareVersion_fun</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, block_command.o(.text.read_FirmwareVersion_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[117]"></a>read_command_id_handle</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, block_command.o(.text.read_command_id_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_command_id_handle &rArr; cal_crc8_check
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[1d]"></a>read_serial_number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, block_command.o(.text.read_serial_number))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[116]"></a>register_read_fun</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, data_flash.o(.text.register_read_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = register_read_fun &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[115]"></a>register_write_fun</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, data_flash.o(.text.register_write_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = register_write_fun &rArr; cal_crc8_check
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_seal_type
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[119]"></a>run_task_event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comm_protocol.o(.text.run_task_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_task_event &rArr; clear_dog
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_reset_system
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dog
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[f4]"></a>set_I2C_TimeOut_Count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modules_init.o(.text.set_I2C_TimeOut_Count))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[122]"></a>set_iic_rx_handle_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, standard_data_cmd.o(.text.set_iic_rx_handle_type))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[9e]"></a>set_task_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm_protocol.o(.text.set_task_event))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Reset_sys_fun
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCmdProcess
</UL>

<P><STRONG><a name="[11c]"></a>sha256_calc</STRONG> (Thumb, 260 bytes, Stack size 152 bytes, cbmx56x_sha256.o(.text.sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sha256_calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_hmac_calc
</UL>

<P><STRONG><a name="[d9]"></a>sha256_hmac_calc</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, cbmx56x_sha256.o(.text.sha256_hmac_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sha256_hmac_calc &rArr; sha256_calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_calc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filled_authen_cmd
</UL>

<P><STRONG><a name="[11d]"></a>sleep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, modules_init.o(.text.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sleep &rArr; i2c_busy_judge
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_deepsleep2_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_busy_judge
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_decrease
</UL>

<P><STRONG><a name="[c4]"></a>sleep_timeout_decrease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, modules_pmu.o(.text.sleep_timeout_decrease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sleep_timeout_decrease &rArr; sleep &rArr; i2c_busy_judge
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[c6]"></a>t_comA0Change</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, bi2cs_interface.o(.text.t_comA0Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = t_comA0Change &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
</UL>

<P><STRONG><a name="[108]"></a>tim1_cnt_update_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_tim1.o(.text.tim1_cnt_update_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[109]"></a>tim1_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_tim1.o(.text.tim1_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[b7]"></a>tim1_interrupt_status_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_tim1.o(.text.tim1_interrupt_status_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_isr_process
</UL>

<P><STRONG><a name="[b5]"></a>tim1_interrupt_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cbmx56x_tim1.o(.text.tim1_interrupt_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_isr_process
</UL>

<P><STRONG><a name="[107]"></a>tim1_timer_config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cbmx56x_tim1.o(.text.tim1_timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tim1_timer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>

<P><STRONG><a name="[af]"></a>timer_reg_command</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, app_reg_cmd_handle.o(.text.timer_reg_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = timer_reg_command &rArr; handle_debug_mode &rArr; parse_rx_data_packet &rArr; data_memory_write_fun &rArr; os_write_flash &rArr; fmc_write_flash &rArr; flash_page_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_W_L
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFUdata_Chk
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_event
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_Erase_B
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_Erase_A
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase_B
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase_A
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_debug_mode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_rx_handle_type
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_block_read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iic_rx_handle_type
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_task
</UL>

<P><STRONG><a name="[ba]"></a>ts_W_H</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myi2c.o(.text.ts_W_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts_W_H
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[b6]"></a>ts_W_L</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myi2c.o(.text.ts_W_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts_W_L
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIPAmessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_isr_process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reg_command
</UL>

<P><STRONG><a name="[f1]"></a>tx_err_code_packet</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, comm_protocol.o(.text.tx_err_code_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_err_code_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_run_time
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_debug_mode
</UL>

<P><STRONG><a name="[bb]"></a>update_soc_input_param</STRONG> (Thumb, 1404 bytes, Stack size 48 bytes, task.o(.text.update_soc_input_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = update_soc_input_param &rArr; modules_cc_hp_updata_value &rArr; cc_get_current &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_voltage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_enable_ctrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hs_get_value
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pmu_period_time
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_enable_ctrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fabs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCR_Mode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Div_B
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_intetrrupt_status_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_intetrrupt_flag_clear
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fristsample
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_start_connection
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task_loop
</UL>

<P><STRONG><a name="[fe]"></a>user_app_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modules_init.o(.text.user_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = user_app_init &rArr; modules_init &rArr; VADC_init &rArr; vadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>vadc_channel_enable_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_channel_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[a7]"></a>vadc_channel_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cbmx56x_vadc.o(.text.vadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[a5]"></a>vadc_chop_enable_ctrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_chop_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[a8]"></a>vadc_down_sampling_rate_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_down_sampling_rate_set))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[ac]"></a>vadc_enable_ctrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_enable_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[125]"></a>vadc_get_temperature</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, cbmx56x_vadc.o(.text.vadc_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vadc_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdiv_quotient_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[127]"></a>vadc_get_voltage</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, cbmx56x_vadc.o(.text.vadc_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vadc_get_voltage &rArr; hdiv_quotient_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_ahb_periph_clock_enable_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdiv_quotient_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
</UL>

<P><STRONG><a name="[a4]"></a>vadc_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[ab]"></a>vadc_interrupt_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_interrupt_config))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[a2]"></a>vadc_intetrrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_intetrrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>vadc_intetrrupt_status_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_intetrrupt_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>vadc_stop_mode_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_stop_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[a6]"></a>vadc_vcm_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cbmx56x_vadc.o(.text.vadc_vcm_set))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_init
</UL>

<P><STRONG><a name="[fd]"></a>writeDFbySubcmd</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, standard_data_cmd.o(.text.writeDFbySubcmd))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_isr_process
</UL>

<P><STRONG><a name="[19]"></a>write_Reset_sys_fun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, block_command.o(.text.write_Reset_sys_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_Reset_sys_fun
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[1e]"></a>write_SealDevice_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_SealDevice_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[1c]"></a>write_calibration_enable_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_calibration_enable_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[118]"></a>write_command_id_handle</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, block_command.o(.text.write_command_id_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_command_id_handle &rArr; cal_crc8_check
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_random
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_rx_data_packet
</UL>

<P><STRONG><a name="[18]"></a>write_full_unseal_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_full_unseal_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[1a]"></a>write_life_time_enable_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_life_time_enable_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[1b]"></a>write_life_time_flush_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_life_time_flush_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[17]"></a>write_unseal_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, block_command.o(.text.write_unseal_fun))
<BR>[Address Reference Count : 1]<UL><LI> block_command.o(.rodata.command_id_fun)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CCCV
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LifeTime_Calc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cap
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_iRSOC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RSOC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_QMax
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_FullCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_ATTE
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bi2cs_dataCmd_Save
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCharge
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_pinghua
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning_cpl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_work
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_FCC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_inner_3res
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_factor_of_fcc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_HoseiRC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CPVolt
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_soc_input_param
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modules_cc_hp_updata_value
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_RC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_QMax
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_AvgCur
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_ATTF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_ATTE
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_iRC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_RC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCharge
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning_cpl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Relearning
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsg_Update_FCC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_inner_3res
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_factor_of_fcc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_HoseiRC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CPVolt
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
</UL>

<P><STRONG><a name="[12a]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_comA0Change
</UL>

<P><STRONG><a name="[12c]"></a>_dleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dcmp.o(i._dleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[12b]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[12d]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vadc_get_temperature
</UL>

<P><STRONG><a name="[12e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[130]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[37]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[36]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[131]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[12f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
